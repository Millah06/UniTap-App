import 'dart:io';
import 'dart:math';

import 'package:everywhere/components/dash_line.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';

import '../constraints/constants.dart';

class ReceiptBuilder {

  Future<void> exportToPdf(Map receiptData) async {
    List<List<dynamic>> rows = [];

    PdfColor generateColor() {
      Random random = Random();
      double pastelStrength = 0.2;
      return PdfColor(
          (random.nextDouble() * (1-pastelStrength)),
          (random.nextDouble() * (1-pastelStrength)),
          (random.nextDouble() * (1-pastelStrength))
      );
    }
    final pdf = pw.Document();

    final logoBytes = await rootBundle.load('images/eraser.png');

    final logoWaterMark = pw.MemoryImage(logoBytes.buffer.asUint8List());

    final smallBytes = await rootBundle.load('images/eraser.png');

    final smallLogo = pw.MemoryImage(smallBytes.buffer.asUint8List());



    final font = await rootBundle.load('assets/fonts/DejaVuSans.ttf');
    final ttf = pw.Font.ttf(font.buffer.asByteData());
    pdf.addPage(
        pw.MultiPage(
            pageTheme: pw.PageTheme(
                buildBackground: (context) => pw.Center(
                    child: pw.Opacity(
                        opacity: 0.19,
                        child: pw.GridView(
                            crossAxisCount: 3,
                            childAspectRatio: 1,
                            children: List.generate(21, (index) => pw.Center(
                                child: pw.Transform.rotate(
                                    angle: 0.6,
                                    child: pw.Container(
                                      width: 80,
                                      height: 80,
                                      child: pw.Image(
                                          logoWaterMark,
                                          fit: pw.BoxFit.cover
                                      )
                                    )
                                )
                            )
                            )
                        )
                    )
                )
            ),
            footer: (context) => pw.Container(
                margin: pw.EdgeInsets.only(top: 10),
                child: pw.Row(
                  mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                  children: [
                    pw.Text('©️ ${DateTime.now().year} SmartSpend. All rights reserved',  style: pw.TextStyle(font: ttf, fontSize: 10, color: PdfColors.grey) ),
                    pw.Text('Generated by SmartSpend | ${context.pageNumber} of ${context.pagesCount}',
                        style: pw.TextStyle(font: ttf, fontSize: 10, color: PdfColors.grey)),
                  ],
                )
            ),
            build: (context) {
              return [
                pw.Column(
                    mainAxisAlignment: pw.MainAxisAlignment.start,
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Row(
                          mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                          children: [
                            pw.Column(
                                crossAxisAlignment: pw.CrossAxisAlignment.start,
                                children: [
                                  pw.Row(
                                      children: [
                                        pw.Image(smallLogo, width: 40, height: 40),
                                        pw.SizedBox(width: 5),
                                        pw.Text('ElitePay', style: pw.TextStyle(fontSize: 25, fontWeight: pw.FontWeight.bold)),
                                      ]
                                  ),
                                  pw.SizedBox(height: 7),
                                  pw.Text('Save, Track, Improve and Grow', style: pw.TextStyle(fontWeight: pw.FontWeight.bold))
                                ]
                            ),
                            pw.Text('Transaction Receipt', style: pw.TextStyle(
                                color: PdfColors.black,
                                font: ttf,
                                fontSize: 20,
                                fontWeight: pw.FontWeight.bold
                            ),)
                          ]
                      ),
                      pw.Divider(),
                      pw.SizedBox(height: 20),
                      pw.Row(
                        mainAxisAlignment: pw.MainAxisAlignment.center,
                        crossAxisAlignment: pw.CrossAxisAlignment.center,
                        children: [
                          pw.Text(kNaira, style: pw.TextStyle(fontSize: 18,
                              fontWeight: pw.FontWeight.bold, font: ttf, color:
                              PdfColor.fromHex('#21D3ED')),),
                          pw.SizedBox(width: 2,),
                          // pw.BalanceText(3000, 30, 18, color: kButtonColor),
                          pw.SizedBox(width: 0,),
                        ],
                      ),
                      pw.Text('Successful',
                        style: pw.TextStyle(color: PdfColors.black,
                            fontWeight: pw.FontWeight.bold),),
                      pw.Text(DateFormat('MMMM dd, yyyy hh:mm a').
                      format(DateTime.now())),
                      pw.Divider(),
                      pw.SizedBox(height: 20),
                      pw.Text('Transactions Details', style: pw.TextStyle(
                          fontSize: 15, fontWeight: pw.FontWeight.bold)),
                      pw.SizedBox(height: 10),
                      pw.Column(
                        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                          children: [
                            ...List.generate(receiptData.length, (index)
                            {
                              String key = receiptData.keys.toList()[index];
                              String value = receiptData.values.toList()[index];
                              return pw.Row(
                                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                                children: [
                                  pw.Text(key,
                                    style: pw.TextStyle(
                                        color: PdfColors.black,
                                        // pw.fontFamily: 'OpenSans',
                                        fontSize: 13,
                                        fontWeight: pw.FontWeight.bold
                                    ),),
                                  pw.Text(value,
                                    style: pw.TextStyle(
                                        color: PdfColors.black,
                                        // fOamily: 'OpenSans',
                                        fontSize: 14,
                                        fontWeight: pw.FontWeight.bold
                                    ),),
                                ],
                              );
                            }
                            ),
                            pw.SizedBox(height: 80,),
                            // DashedLine(height: 1,),
                            pw.SizedBox(height: 10,),
                            pw.Text('Enjoy a better life with ElitePay. Book flight, book hotel, spend in foreign currencies, get '
                                'virtual foreign cards, pay all your bills',
                              style: pw.TextStyle(color: PdfColors.black, fontSize: 12),)
                          ]
                      )
                    ]
                ),
              ];
            }
        )
    );

    final directory = await getTemporaryDirectory();
    final file = File('${directory.path}/smart_spend_export_${DateTime.now().toLocal().toString().substring(0, 10)}.pdf');
    await file.writeAsBytes(await pdf.save());

    await SharePlus.instance.share(
      ShareParams(
          files:  [XFile(file.path)],
          title: 'Smart Spend Pdf Expense Report',
          text: 'Transaction Receipt'
      ),
    );
  }
}